# -*- coding: utf-8 -*-
"""cell_phone_detection_cnn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ugrzYyWFIDOEwLHG6EkmDWBG0QPBXD2Y
"""

import zipfile
from google.colab import drive

drive.mount('/content/drive/')

zip_ref = zipfile.ZipFile("/content/cell_phone.zip", 'r')
zip_ref.extractall()
zip_ref.close()

import matplotlib.pyplot as plt

from keras.layers import Conv2D, Activation, GlobalAvgPool2D, MaxPooling2D, Dense, Flatten

from keras.models import Sequential

file1='/content/training/training'

file2='/content/test_samples/test_samples'

from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.05,
                                   zoom_range = 0.05,
                                   horizontal_flip = True)

train_set = train_datagen.flow_from_directory(file1,
                                                 target_size = (384, 384),
                                                 batch_size = 8,
                                                 class_mode = 'binary')

import tensorflow as tf

test_datagen = ImageDataGenerator(rescale = 1./255)

test_set = test_datagen.flow_from_directory(file2,
                                            target_size = (384, 384),
                                            batch_size = 8,
                                            class_mode = 'binary')

cnn = tf.keras.models.Sequential()
cnn.add(tf.keras.layers.Dense(1, activation='relu'))
cnn.add(tf.keras.layers.Conv2D(64, kernel_size=[2,2], padding='valid', activation='relu', input_shape=[384, 384, 3]))
cnn.add(tf.keras.layers.MaxPooling2D(pool_size=[2,2], strides=1, padding='valid'))
cnn.add(tf.keras.layers.Dense(1, activation='relu'))
cnn.add(tf.keras.layers.MaxPooling2D(pool_size=[2,2], strides=1, padding='valid'))
cnn.add(tf.keras.layers.Conv2D(32, kernel_size=[2,2],padding='valid', activation='relu' ))
cnn.add(tf.keras.layers.MaxPooling2D(pool_size=[2,2], strides=1, padding='valid'))
cnn.add(tf.keras.layers.Flatten())
cnn.add(tf.keras.layers.Dense(1, activation='sigmoid'))
cnn.compile(optimizer = 'adam', loss='binary_crossentropy', metrics=['accuracy'])

cnn = cnn.fit(train_set, validation_data =test_set, epochs=50, verbose=2)

plt.figure(figsize =(6,4))
plt.plot(cnn.history['val_loss'])
plt.title('Validation Loss')
plt.show()

plt.figure(figsize =(6,4))
plt.plot(cnn.history['loss'])
plt.title('Training loss')
plt.show()

plt.figure(figsize =(6,4))
plt.plot(cnn.history['accuracy'])
plt.title("Training Accuracy")
plt.show()

plt.figure(figsize =(6,4))
plt.plot(cnn.history['val_accuracy'])
plt.title("validation Accuracy")
plt.show()

cnn.model.save('cell_pred.h5')

import numpy as np

image = '/content/table.jpg'

import cv2

def prepare(image):
  IMG_SIZE=384
  img_array = cv2.imread('/content/table.jpg', cv2.IMREAD_COLOR)
  new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))
  return new_array.reshape(-1, IMG_SIZE, IMG_SIZE, 3)

# Commented out IPython magic to ensure Python compatibility.

y=cnn.model.predict([prepare('/content/table.jpg')])

print(y)
score = y[0]
print(
    "This is %.2f percent chance no cell phone and %.2f there is a cell phone."
#     %(100*(1-score), 100*score))

img = cv2.imread('/content/table.jpg',0)
plt.imshow(img, interpolation = 'bicubic')
plt.xticks([]), plt.yticks([])  
plt.show()